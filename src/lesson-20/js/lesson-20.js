//todo [1]
console.log(
    "%c [1] ",
    "color: yellow; background-color: #2274A5",
);
//? üî∏ –°—Ç–≤–æ—Ä–∏—Ç–∏ –≥–∞–ª–µ—Ä–µ—é –∑–æ–±—Ä–∞–∂–µ–Ω—å, —è–∫—É –º–æ–∂–Ω–∞ –ø—Ä–æ–≥–æ—Ä—Ç–∞—Ç–∏
//? –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é –∫–ª–∞–≤—ñ—à –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –≤–ª—ñ–≤–æ / –≤–ø—Ä–∞–≤–æ)
//? ‚ú¥Ô∏è –í HTML —î —Ç–∞–∫—ñ –µ–ª–µ–º–µ–Ω—Ç–∏:


//! –ö–æ–¥ –≤–∏–∫–æ–Ω–∞–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è
let currentIndex = 0;
const imageElements = document.querySelectorAll('.image');
console.log("imageElememts:", imageElements);
console.log("imageElememts.length:", imageElements.length);

function updateVisibleImage(index) {
  imageElements.forEach((img, i) => {
    img.style.display = i === index ? 'block' : 'none';
  });
}

updateVisibleImage(currentIndex);

document.addEventListener('keydown', (event) => {
  if (event.key === 'ArrowRight') {
    currentIndex = (currentIndex + 1) % imageElements.length;
    updateVisibleImage(currentIndex);
  } else if (event.key === 'ArrowLeft') {
    currentIndex = (currentIndex - 1 + imageElements.length) % imageElements.length;
    updateVisibleImage(currentIndex);
  }
});
console.log("--------------------------------------------------");
//todo [2]
console.log(
    "%c [2] ",
    "color: yellow; background-color: #2274A5",
);
//? üî∏ –ù–∞–ø–∏—à–∏ —Å–∫—Ä–∏–ø—Ç —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ –æ—á–∏—â–µ–Ω–Ω—è –∫–æ–ª–µ–∫—Ü—ñ—ó –µ–ª–µ–º–µ–Ω—Ç—ñ–≤.
//? –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–≤–æ–¥–∏—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –≤ input 
//? —ñ –Ω–∞—Ç–∏—Å–∫–∞—î –∫–Ω–æ–ø–∫—É –°—Ç–≤–æ—Ä–∏—Ç–∏, –ø—ñ—Å–ª—è —á–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏—Ç—å—Å—è –∫–æ–ª–µ–∫—Ü—ñ—è. 
//? –ü—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –Ω–∞ –∫–Ω–æ–ø–∫—É –û—á–∏—Å—Ç–∏—Ç–∏, –∫–æ–ª–µ–∫—Ü—ñ—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –æ—á–∏—â–∞—î—Ç—å—Å—è.
//? üî∏ –°—Ç–≤–æ—Ä–∏ —Ñ—É–Ω–∫—Ü—ñ—é createBoxes(amount), 
//? —è–∫–∞ –ø—Ä–∏–π–º–∞—î 1 –ø–∞—Ä–∞–º–µ—Ç—Ä amount - —á–∏—Å–ª–æ.
//? –§—É–Ω–∫—Ü—ñ—è —Å—Ç–≤–æ—Ä—é—î —Å—Ç—ñ–ª—å–∫–∏ div, 
//? —Å–∫—ñ–ª—å–∫–∏ –≤–∫–∞–∑–∞–Ω–æ –≤ amount —ñ –¥–æ–¥–∞—î —ó—Ö –≤ div#boxes.
//? üî∏ –ö–æ–∂–µ–Ω —Å—Ç–≤–æ—Ä–µ–Ω–∏–π div:
//? - –ú–∞—î –≤–∏–ø–∞–¥–∫–æ–≤–∏–π rgb –∫–æ–ª—ñ—Ä —Ñ–æ–Ω—É
//? - –†–æ–∑–º—ñ—Ä–∏ –Ω–∞–π–ø–µ—Ä—à–æ–≥–æ div ‚Äî 30px –Ω–∞ 30px
//? - –ö–æ–∂–µ–Ω –Ω–∞—Å—Ç—É–ø–Ω–∏–π div –ø—ñ—Å–ª—è –ø–µ—Ä—à–æ–≥–æ, 
//?   –ø–æ–≤–∏–Ω–µ–Ω –±—É—Ç–∏ —à–∏—Ä—à–µ —ñ –≤–∏—â–µ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ –Ω–∞ 10px
//? üî∏ –°—Ç–≤–æ—Ä–∏ —Ñ—É–Ω–∫—Ü—ñ—é destroyBoxes(), —è–∫–∞ –æ—á–∏—â–∞—î div#boxes.
//? ‚ú¥Ô∏è –í HTML —î —Ç–∞–∫—ñ –µ–ª–µ–º–µ–Ω—Ç–∏:
/*
<div id="controls">
    <input type="number" min="0" max="100" step="1" />
    <button type="button" data-action="render">–°—Ç–≤–æ—Ä–∏—Ç–∏</button>
    <button type="button" data-action="destroy">–û—á–∏—Å—Ç–∏—Ç–∏</button>
</div>

<div id="boxes"></div>
*/
//! –ö–æ–¥ –≤–∏–∫–æ–Ω–∞–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è
const input = document.querySelector('#controls input');
const renderBtn = document.querySelector('[data-action="render"]');
const destroyBtn = document.querySelector('[data-action="destroy"]');
const boxesContainer = document.querySelector('#boxes');

renderBtn.addEventListener('click', () => {
  const amount = Number(input.value);
  createBoxes(amount);
});

destroyBtn.addEventListener('click', destroyBoxes);
function createBoxes(amount) {
  destroyBoxes(); 

  const boxes = []; 
  let size = 30;

  for (let i = 0; i < amount; i++) {
    const box = document.createElement('div');
    console.log("box:",box)
    box.style.width = `${size}px`;
    box.style.height = `${size}px`;
    box.style.backgroundColor = getRandomColor();
    box.style.marginBottom = '5px';
    boxes.push(box);
    size += 10;
  }
  console.log("boxes:",boxes);
  boxesContainer.append(...boxes);
}
function destroyBoxes() {
  boxesContainer.innerHTML = '';
}
function getRandomColor() {
  const r = Math.floor(Math.random() * 256);
  const g = Math.floor(Math.random() * 256);
  const b = Math.floor(Math.random() * 256);
  return `rgb(${r}, ${g}, ${b})`;
}

console.log("--------------------------------------------------");
input.addEventListener("input", ()=>{
  console.log("action input:",typeof input.value);
})